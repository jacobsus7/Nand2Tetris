// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //zero x or y?
    Mux16(a=x , b=false , sel=zx , out=zerox );
    Mux16(a=y , b=false , sel=zy , out=zeroy );
    
    //negate x or y?
    Not16(in=zerox , out=znx );
    Not16(in=zeroy , out=zny );

    Mux16(a=zerox , b=znx , sel=nx , out=finalx );    
    Mux16(a=zeroy , b=zny , sel=ny , out=finaly );
    
    //x+y OR x & y?
    Add16(a=finalx , b=finaly , out=xyadded );
    And16(a=finalx , b=finaly , out=xyanded );
    Mux16(a=xyanded , b=xyadded , sel=f , out=preout );

    //negate output?
    Not16(in=preout , out=negout );
    Mux16(a=preout , b=negout , sel=no , out=out ); //final output
    Mux16(a=preout , b=negout , sel=no , out=outcopy);
    Mux16(a=preout , b=negout , sel=no , out[0..7]=outcopy1, out[8..15]=outcopy2 );//copy the output
    
    
    //is output zero?
    Or8Way(in=outcopy1 , out= zr1);
    Or8Way(in=outcopy2 , out= zr2);
    Or(a=zr1 , b=zr2 , out=nzr );
    Not(in=nzr , out = zr);
    

    //is output negative?
    And16(a=outcopy , b=true , out[15]=ng ); 
   
}